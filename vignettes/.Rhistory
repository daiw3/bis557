library(tidyverse)
library(keras)
library(glmnet)
library(tidyr)
library(ggplot2)
library(readr)
library(tensorflow)
mnist <- dataset_mnist()
x_train <- mnist$train$x
y_train <- mnist$train$y
x_test <- mnist$test$x
y_test <- mnist$test$y
x_train <- array_reshape(x_train, c(60000, 28^2))
x_test <- array_reshape(x_test, c(10000, 28^2))
X_train <- mnist$train$x
X_valid <- mnist$test$x
Y_train <- mnist$train$y
Y_valid <- mnist$test$y
# define the model
model <- keras_model_sequential()
model %>%
layer_conv_2d(filters = 32, kernel_size = c(2,2),
input_shape = c(28, 28, 1),
padding = "same") %>%
layer_activation(activation = "relu") %>%
layer_max_pooling_2d(pool_size = c(2, 2)) %>%
layer_dropout(rate = 0.5) %>%
layer_flatten() %>%
layer_dense(units = 256) %>%
layer_activation(activation = "relu") %>%
layer_dropout(rate = 0.5) %>%
layer_dense(units = 128) %>%
layer_activation(activation = "relu") %>%
layer_dropout(rate = 0.5) %>%
layer_dense(units = 10) %>%
layer_activation(activation = "softmax")
# Compile model
model %>% compile(loss = 'categorical_crossentropy',
optimizer = optimizer_rmsprop(),
metrics = c('accuracy'))
history <- model %>%
fit(X_train, Y_train, epochs = 10,
validation_data = list(X_valid, Y_valid))
dim(X_train)
X_train <- array_reshape(X_train, dim = c(nrow(x_train), 28, 28, 1))
X_valid <- array_reshape(X_valid, dim = c(nrow(x_train), 28, 28, 1))
nrow(x_train)
X_valid <- array_reshape(X_valid, dim = c(nrow(X_valid), 28, 28, 1))
# define the model
model <- keras_model_sequential()
model %>%
layer_conv_2d(filters = 32, kernel_size = c(2,2),
input_shape = c(28, 28, 1),
padding = "same") %>%
layer_activation(activation = "relu") %>%
layer_max_pooling_2d(pool_size = c(2, 2)) %>%
layer_dropout(rate = 0.5) %>%
layer_flatten() %>%
layer_dense(units = 256) %>%
layer_activation(activation = "relu") %>%
layer_dropout(rate = 0.5) %>%
layer_dense(units = 128) %>%
layer_activation(activation = "relu") %>%
layer_dropout(rate = 0.5) %>%
layer_dense(units = 10) %>%
layer_activation(activation = "softmax")
# Compile model
model %>% compile(loss = 'categorical_crossentropy',
optimizer = optimizer_rmsprop(),
metrics = c('accuracy'))
set.seed(13)
history <- model %>%
fit(X_train, Y_train, epochs = 10,
validation_data = list(X_valid, Y_valid))
Y_train <- to_categorical(Y_train, 10L)
Y_valid <- to_categorical(Y_valid, 10L)
# define the model
model <- keras_model_sequential()
model %>%
layer_conv_2d(filters = 32, kernel_size = c(2,2),
input_shape = c(28, 28, 1),
padding = "same") %>%
layer_activation(activation = "relu") %>%
layer_max_pooling_2d(pool_size = c(2, 2)) %>%
layer_dropout(rate = 0.5) %>%
layer_flatten() %>%
layer_dense(units = 128) %>%
layer_activation(activation = "relu") %>%
layer_dropout(rate = 0.5) %>%
layer_dense(units = 128) %>%
layer_activation(activation = "relu") %>%
layer_dropout(rate = 0.5) %>%
layer_dense(units = 10) %>%
layer_activation(activation = "softmax")
# Compile model
model %>% compile(loss = 'categorical_crossentropy',
optimizer = optimizer_rmsprop(),
metrics = c('accuracy'))
set.seed(13)
history <- model %>%
fit(X_train, Y_train, epochs = 10,
validation_data = list(X_valid, Y_valid))
plot(model)
plot(history)
# Prediction
predict.train <- predict_classes(model, X_train)
predict.test <- predict_classes(model, X_valid)
print(paste0("Prediction accuracy on training dataset is ", mean(predict.train == y_train)))
print(paste0("Prediction accuracy on testing dataset is ", mean(predict.test == y_test)))
save(history, file = "history1.rda")
save(predict.train, file = "predict_train_1.rda")
save(predict.test, file = "predict_test_1.rda")
getwd()
load("/Users/wei/Desktop/bis557/data/predict_train.rda")
load("/Users/wei/Library/Containers/com.tencent.xinWeChat/Data/Library/Application Support/com.tencent.xinWeChat/2.0b4.0.9/962ab97346c6b5d86397df79169cef68/Message/MessageTemp/d003a033f498577c9e2379ca26bfc7f8/OpenData/bis557/data/history.rda")
history$params
history$metrics
load("/Users/wei/Documents/Yale/Courses/2018-2019/Major/BIS 557 Computational Statistics/Homework/homework 5/emnist_train.rda")
y_train <- as_vector(emnist_train[, 1]) -1
library(tidyverse)
library(keras)
library(glmnet)
library(tidyr)
library(ggplot2)
library(readr)
library(tensorflow)
y_train <- as_vector(emnist_train[, 1]) -1
y_test <- as_vector(emnist_test[, 1]) - 1
load("/Users/wei/Documents/Yale/Courses/2018-2019/Major/BIS 557 Computational Statistics/Homework/homework 5/emnist_test.rda")
y_test <- as_vector(emnist_test[, 1]) - 1
save(y_train, file = "y_train.rda")
save(y_test, file = "y_test.rda")
getwd()
